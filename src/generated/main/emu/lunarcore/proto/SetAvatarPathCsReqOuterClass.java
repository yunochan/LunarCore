// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class SetAvatarPathCsReqOuterClass {
  /**
   * Protobuf type {@code SetAvatarPathCsReq}
   */
  public static final class SetAvatarPathCsReq extends ProtoMessage<SetAvatarPathCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 7;</code>
     */
    private int avatarId;

    private SetAvatarPathCsReq() {
    }

    /**
     * @return a new empty instance of {@code SetAvatarPathCsReq}
     */
    public static SetAvatarPathCsReq newInstance() {
      return new SetAvatarPathCsReq();
    }

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 7;</code>
     * @return whether the avatarId field is set
     */
    public boolean hasAvatarId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 7;</code>
     * @return this
     */
    public SetAvatarPathCsReq clearAvatarId() {
      bitField0_ &= ~0x00000001;
      avatarId = 0;
      return this;
    }

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 7;</code>
     * @return the avatarId
     */
    public MultiPathAvatarTypeOuterClass.MultiPathAvatarType getAvatarId() {
      return MultiPathAvatarTypeOuterClass.MultiPathAvatarType.forNumber(avatarId);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link SetAvatarPathCsReq#getAvatarId()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getAvatarIdValue() {
      return avatarId;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link MultiPathAvatarTypeOuterClass.MultiPathAvatarType}. Setting an invalid value
     * can cause {@link SetAvatarPathCsReq#getAvatarId()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public SetAvatarPathCsReq setAvatarIdValue(final int value) {
      bitField0_ |= 0x00000001;
      avatarId = value;
      return this;
    }

    /**
     * <code>optional .MultiPathAvatarType avatar_id = 7;</code>
     * @param value the avatarId to set
     * @return this
     */
    public SetAvatarPathCsReq setAvatarId(
        final MultiPathAvatarTypeOuterClass.MultiPathAvatarType value) {
      bitField0_ |= 0x00000001;
      avatarId = value.getNumber();
      return this;
    }

    @Override
    public SetAvatarPathCsReq copyFrom(final SetAvatarPathCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        avatarId = other.avatarId;
      }
      return this;
    }

    @Override
    public SetAvatarPathCsReq mergeFrom(final SetAvatarPathCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAvatarId()) {
        setAvatarIdValue(other.avatarId);
      }
      return this;
    }

    @Override
    public SetAvatarPathCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      avatarId = 0;
      return this;
    }

    @Override
    public SetAvatarPathCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SetAvatarPathCsReq)) {
        return false;
      }
      SetAvatarPathCsReq other = (SetAvatarPathCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasAvatarId() || avatarId == other.avatarId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeEnumNoTag(avatarId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(avatarId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SetAvatarPathCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // avatarId
            final int value = input.readInt32();
            if (MultiPathAvatarTypeOuterClass.MultiPathAvatarType.forNumber(value) != null) {
              avatarId = value;
              bitField0_ |= 0x00000001;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeEnum(FieldNames.avatarId, avatarId, MultiPathAvatarTypeOuterClass.MultiPathAvatarType.converter());
      }
      output.endObject();
    }

    @Override
    public SetAvatarPathCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1787287636:
          case -428636735: {
            if (input.isAtField(FieldNames.avatarId)) {
              if (!input.trySkipNullValue()) {
                final MultiPathAvatarTypeOuterClass.MultiPathAvatarType value = input.readEnum(MultiPathAvatarTypeOuterClass.MultiPathAvatarType.converter());
                if (value != null) {
                  avatarId = value.getNumber();
                  bitField0_ |= 0x00000001;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SetAvatarPathCsReq clone() {
      return new SetAvatarPathCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SetAvatarPathCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SetAvatarPathCsReq(), data).checkInitialized();
    }

    public static SetAvatarPathCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SetAvatarPathCsReq(), input).checkInitialized();
    }

    public static SetAvatarPathCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SetAvatarPathCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating SetAvatarPathCsReq messages
     */
    public static MessageFactory<SetAvatarPathCsReq> getFactory() {
      return SetAvatarPathCsReqFactory.INSTANCE;
    }

    private enum SetAvatarPathCsReqFactory implements MessageFactory<SetAvatarPathCsReq> {
      INSTANCE;

      @Override
      public SetAvatarPathCsReq create() {
        return SetAvatarPathCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName avatarId = FieldName.forField("avatarId", "avatar_id");
    }
  }
}
