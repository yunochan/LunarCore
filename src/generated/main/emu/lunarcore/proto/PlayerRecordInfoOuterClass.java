// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class PlayerRecordInfoOuterClass {
  /**
   * Protobuf type {@code PlayerRecordInfo}
   */
  public static final class PlayerRecordInfo extends ProtoMessage<PlayerRecordInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 CPIKKMDOKHA = 3;</code>
     */
    private int cPIKKMDOKHA;

    /**
     * <code>optional uint32 MGDIMDLPOGA = 4;</code>
     */
    private int mGDIMDLPOGA;

    /**
     * <code>optional uint32 DKPLJPHGDMB = 7;</code>
     */
    private int dKPLJPHGDMB;

    /**
     * <code>optional uint32 INMEAGINKPN = 8;</code>
     */
    private int iNMEAGINKPN;

    /**
     * <code>optional uint32 BIOJHIBFELK = 10;</code>
     */
    private int bIOJHIBFELK;

    /**
     * <code>optional uint32 MFMOAJONBBF = 12;</code>
     */
    private int mFMOAJONBBF;

    /**
     * <code>optional uint32 HNICFKBEKJO = 14;</code>
     */
    private int hNICFKBEKJO;

    /**
     * <code>optional uint32 OOIOMMKOIAE = 15;</code>
     */
    private int oOIOMMKOIAE;

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     */
    private final PlayerCollectionInfoOuterClass.PlayerCollectionInfo collectionInfo = PlayerCollectionInfoOuterClass.PlayerCollectionInfo.newInstance();

    private PlayerRecordInfo() {
    }

    /**
     * @return a new empty instance of {@code PlayerRecordInfo}
     */
    public static PlayerRecordInfo newInstance() {
      return new PlayerRecordInfo();
    }

    /**
     * <code>optional uint32 CPIKKMDOKHA = 3;</code>
     * @return whether the cPIKKMDOKHA field is set
     */
    public boolean hasCPIKKMDOKHA() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 CPIKKMDOKHA = 3;</code>
     * @return this
     */
    public PlayerRecordInfo clearCPIKKMDOKHA() {
      bitField0_ &= ~0x00000001;
      cPIKKMDOKHA = 0;
      return this;
    }

    /**
     * <code>optional uint32 CPIKKMDOKHA = 3;</code>
     * @return the cPIKKMDOKHA
     */
    public int getCPIKKMDOKHA() {
      return cPIKKMDOKHA;
    }

    /**
     * <code>optional uint32 CPIKKMDOKHA = 3;</code>
     * @param value the cPIKKMDOKHA to set
     * @return this
     */
    public PlayerRecordInfo setCPIKKMDOKHA(final int value) {
      bitField0_ |= 0x00000001;
      cPIKKMDOKHA = value;
      return this;
    }

    /**
     * <code>optional uint32 MGDIMDLPOGA = 4;</code>
     * @return whether the mGDIMDLPOGA field is set
     */
    public boolean hasMGDIMDLPOGA() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 MGDIMDLPOGA = 4;</code>
     * @return this
     */
    public PlayerRecordInfo clearMGDIMDLPOGA() {
      bitField0_ &= ~0x00000002;
      mGDIMDLPOGA = 0;
      return this;
    }

    /**
     * <code>optional uint32 MGDIMDLPOGA = 4;</code>
     * @return the mGDIMDLPOGA
     */
    public int getMGDIMDLPOGA() {
      return mGDIMDLPOGA;
    }

    /**
     * <code>optional uint32 MGDIMDLPOGA = 4;</code>
     * @param value the mGDIMDLPOGA to set
     * @return this
     */
    public PlayerRecordInfo setMGDIMDLPOGA(final int value) {
      bitField0_ |= 0x00000002;
      mGDIMDLPOGA = value;
      return this;
    }

    /**
     * <code>optional uint32 DKPLJPHGDMB = 7;</code>
     * @return whether the dKPLJPHGDMB field is set
     */
    public boolean hasDKPLJPHGDMB() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 DKPLJPHGDMB = 7;</code>
     * @return this
     */
    public PlayerRecordInfo clearDKPLJPHGDMB() {
      bitField0_ &= ~0x00000004;
      dKPLJPHGDMB = 0;
      return this;
    }

    /**
     * <code>optional uint32 DKPLJPHGDMB = 7;</code>
     * @return the dKPLJPHGDMB
     */
    public int getDKPLJPHGDMB() {
      return dKPLJPHGDMB;
    }

    /**
     * <code>optional uint32 DKPLJPHGDMB = 7;</code>
     * @param value the dKPLJPHGDMB to set
     * @return this
     */
    public PlayerRecordInfo setDKPLJPHGDMB(final int value) {
      bitField0_ |= 0x00000004;
      dKPLJPHGDMB = value;
      return this;
    }

    /**
     * <code>optional uint32 INMEAGINKPN = 8;</code>
     * @return whether the iNMEAGINKPN field is set
     */
    public boolean hasINMEAGINKPN() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 INMEAGINKPN = 8;</code>
     * @return this
     */
    public PlayerRecordInfo clearINMEAGINKPN() {
      bitField0_ &= ~0x00000008;
      iNMEAGINKPN = 0;
      return this;
    }

    /**
     * <code>optional uint32 INMEAGINKPN = 8;</code>
     * @return the iNMEAGINKPN
     */
    public int getINMEAGINKPN() {
      return iNMEAGINKPN;
    }

    /**
     * <code>optional uint32 INMEAGINKPN = 8;</code>
     * @param value the iNMEAGINKPN to set
     * @return this
     */
    public PlayerRecordInfo setINMEAGINKPN(final int value) {
      bitField0_ |= 0x00000008;
      iNMEAGINKPN = value;
      return this;
    }

    /**
     * <code>optional uint32 BIOJHIBFELK = 10;</code>
     * @return whether the bIOJHIBFELK field is set
     */
    public boolean hasBIOJHIBFELK() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 BIOJHIBFELK = 10;</code>
     * @return this
     */
    public PlayerRecordInfo clearBIOJHIBFELK() {
      bitField0_ &= ~0x00000010;
      bIOJHIBFELK = 0;
      return this;
    }

    /**
     * <code>optional uint32 BIOJHIBFELK = 10;</code>
     * @return the bIOJHIBFELK
     */
    public int getBIOJHIBFELK() {
      return bIOJHIBFELK;
    }

    /**
     * <code>optional uint32 BIOJHIBFELK = 10;</code>
     * @param value the bIOJHIBFELK to set
     * @return this
     */
    public PlayerRecordInfo setBIOJHIBFELK(final int value) {
      bitField0_ |= 0x00000010;
      bIOJHIBFELK = value;
      return this;
    }

    /**
     * <code>optional uint32 MFMOAJONBBF = 12;</code>
     * @return whether the mFMOAJONBBF field is set
     */
    public boolean hasMFMOAJONBBF() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional uint32 MFMOAJONBBF = 12;</code>
     * @return this
     */
    public PlayerRecordInfo clearMFMOAJONBBF() {
      bitField0_ &= ~0x00000020;
      mFMOAJONBBF = 0;
      return this;
    }

    /**
     * <code>optional uint32 MFMOAJONBBF = 12;</code>
     * @return the mFMOAJONBBF
     */
    public int getMFMOAJONBBF() {
      return mFMOAJONBBF;
    }

    /**
     * <code>optional uint32 MFMOAJONBBF = 12;</code>
     * @param value the mFMOAJONBBF to set
     * @return this
     */
    public PlayerRecordInfo setMFMOAJONBBF(final int value) {
      bitField0_ |= 0x00000020;
      mFMOAJONBBF = value;
      return this;
    }

    /**
     * <code>optional uint32 HNICFKBEKJO = 14;</code>
     * @return whether the hNICFKBEKJO field is set
     */
    public boolean hasHNICFKBEKJO() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional uint32 HNICFKBEKJO = 14;</code>
     * @return this
     */
    public PlayerRecordInfo clearHNICFKBEKJO() {
      bitField0_ &= ~0x00000040;
      hNICFKBEKJO = 0;
      return this;
    }

    /**
     * <code>optional uint32 HNICFKBEKJO = 14;</code>
     * @return the hNICFKBEKJO
     */
    public int getHNICFKBEKJO() {
      return hNICFKBEKJO;
    }

    /**
     * <code>optional uint32 HNICFKBEKJO = 14;</code>
     * @param value the hNICFKBEKJO to set
     * @return this
     */
    public PlayerRecordInfo setHNICFKBEKJO(final int value) {
      bitField0_ |= 0x00000040;
      hNICFKBEKJO = value;
      return this;
    }

    /**
     * <code>optional uint32 OOIOMMKOIAE = 15;</code>
     * @return whether the oOIOMMKOIAE field is set
     */
    public boolean hasOOIOMMKOIAE() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional uint32 OOIOMMKOIAE = 15;</code>
     * @return this
     */
    public PlayerRecordInfo clearOOIOMMKOIAE() {
      bitField0_ &= ~0x00000080;
      oOIOMMKOIAE = 0;
      return this;
    }

    /**
     * <code>optional uint32 OOIOMMKOIAE = 15;</code>
     * @return the oOIOMMKOIAE
     */
    public int getOOIOMMKOIAE() {
      return oOIOMMKOIAE;
    }

    /**
     * <code>optional uint32 OOIOMMKOIAE = 15;</code>
     * @param value the oOIOMMKOIAE to set
     * @return this
     */
    public PlayerRecordInfo setOOIOMMKOIAE(final int value) {
      bitField0_ |= 0x00000080;
      oOIOMMKOIAE = value;
      return this;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     * @return whether the collectionInfo field is set
     */
    public boolean hasCollectionInfo() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     * @return this
     */
    public PlayerRecordInfo clearCollectionInfo() {
      bitField0_ &= ~0x00000100;
      collectionInfo.clear();
      return this;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCollectionInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public PlayerCollectionInfoOuterClass.PlayerCollectionInfo getCollectionInfo() {
      return collectionInfo;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public PlayerCollectionInfoOuterClass.PlayerCollectionInfo getMutableCollectionInfo() {
      bitField0_ |= 0x00000100;
      return collectionInfo;
    }

    /**
     * <code>optional .PlayerCollectionInfo collection_info = 2;</code>
     * @param value the collectionInfo to set
     * @return this
     */
    public PlayerRecordInfo setCollectionInfo(
        final PlayerCollectionInfoOuterClass.PlayerCollectionInfo value) {
      bitField0_ |= 0x00000100;
      collectionInfo.copyFrom(value);
      return this;
    }

    @Override
    public PlayerRecordInfo copyFrom(final PlayerRecordInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        cPIKKMDOKHA = other.cPIKKMDOKHA;
        mGDIMDLPOGA = other.mGDIMDLPOGA;
        dKPLJPHGDMB = other.dKPLJPHGDMB;
        iNMEAGINKPN = other.iNMEAGINKPN;
        bIOJHIBFELK = other.bIOJHIBFELK;
        mFMOAJONBBF = other.mFMOAJONBBF;
        hNICFKBEKJO = other.hNICFKBEKJO;
        oOIOMMKOIAE = other.oOIOMMKOIAE;
        collectionInfo.copyFrom(other.collectionInfo);
      }
      return this;
    }

    @Override
    public PlayerRecordInfo mergeFrom(final PlayerRecordInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasCPIKKMDOKHA()) {
        setCPIKKMDOKHA(other.cPIKKMDOKHA);
      }
      if (other.hasMGDIMDLPOGA()) {
        setMGDIMDLPOGA(other.mGDIMDLPOGA);
      }
      if (other.hasDKPLJPHGDMB()) {
        setDKPLJPHGDMB(other.dKPLJPHGDMB);
      }
      if (other.hasINMEAGINKPN()) {
        setINMEAGINKPN(other.iNMEAGINKPN);
      }
      if (other.hasBIOJHIBFELK()) {
        setBIOJHIBFELK(other.bIOJHIBFELK);
      }
      if (other.hasMFMOAJONBBF()) {
        setMFMOAJONBBF(other.mFMOAJONBBF);
      }
      if (other.hasHNICFKBEKJO()) {
        setHNICFKBEKJO(other.hNICFKBEKJO);
      }
      if (other.hasOOIOMMKOIAE()) {
        setOOIOMMKOIAE(other.oOIOMMKOIAE);
      }
      if (other.hasCollectionInfo()) {
        getMutableCollectionInfo().mergeFrom(other.collectionInfo);
      }
      return this;
    }

    @Override
    public PlayerRecordInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      cPIKKMDOKHA = 0;
      mGDIMDLPOGA = 0;
      dKPLJPHGDMB = 0;
      iNMEAGINKPN = 0;
      bIOJHIBFELK = 0;
      mFMOAJONBBF = 0;
      hNICFKBEKJO = 0;
      oOIOMMKOIAE = 0;
      collectionInfo.clear();
      return this;
    }

    @Override
    public PlayerRecordInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      collectionInfo.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof PlayerRecordInfo)) {
        return false;
      }
      PlayerRecordInfo other = (PlayerRecordInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasCPIKKMDOKHA() || cPIKKMDOKHA == other.cPIKKMDOKHA)
        && (!hasMGDIMDLPOGA() || mGDIMDLPOGA == other.mGDIMDLPOGA)
        && (!hasDKPLJPHGDMB() || dKPLJPHGDMB == other.dKPLJPHGDMB)
        && (!hasINMEAGINKPN() || iNMEAGINKPN == other.iNMEAGINKPN)
        && (!hasBIOJHIBFELK() || bIOJHIBFELK == other.bIOJHIBFELK)
        && (!hasMFMOAJONBBF() || mFMOAJONBBF == other.mFMOAJONBBF)
        && (!hasHNICFKBEKJO() || hNICFKBEKJO == other.hNICFKBEKJO)
        && (!hasOOIOMMKOIAE() || oOIOMMKOIAE == other.oOIOMMKOIAE)
        && (!hasCollectionInfo() || collectionInfo.equals(other.collectionInfo));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(cPIKKMDOKHA);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(mGDIMDLPOGA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(dKPLJPHGDMB);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(iNMEAGINKPN);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(bIOJHIBFELK);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(mFMOAJONBBF);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(hNICFKBEKJO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(oOIOMMKOIAE);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 18);
        output.writeMessageNoTag(collectionInfo);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(cPIKKMDOKHA);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(mGDIMDLPOGA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(dKPLJPHGDMB);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(iNMEAGINKPN);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(bIOJHIBFELK);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(mFMOAJONBBF);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(hNICFKBEKJO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(oOIOMMKOIAE);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(collectionInfo);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public PlayerRecordInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // cPIKKMDOKHA
            cPIKKMDOKHA = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // mGDIMDLPOGA
            mGDIMDLPOGA = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // dKPLJPHGDMB
            dKPLJPHGDMB = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // iNMEAGINKPN
            iNMEAGINKPN = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // bIOJHIBFELK
            bIOJHIBFELK = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // mFMOAJONBBF
            mFMOAJONBBF = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // hNICFKBEKJO
            hNICFKBEKJO = input.readUInt32();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // oOIOMMKOIAE
            oOIOMMKOIAE = input.readUInt32();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // collectionInfo
            input.readMessage(collectionInfo);
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.cPIKKMDOKHA, cPIKKMDOKHA);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.mGDIMDLPOGA, mGDIMDLPOGA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.dKPLJPHGDMB, dKPLJPHGDMB);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.iNMEAGINKPN, iNMEAGINKPN);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.bIOJHIBFELK, bIOJHIBFELK);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.mFMOAJONBBF, mFMOAJONBBF);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeUInt32(FieldNames.hNICFKBEKJO, hNICFKBEKJO);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeUInt32(FieldNames.oOIOMMKOIAE, oOIOMMKOIAE);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeMessage(FieldNames.collectionInfo, collectionInfo);
      }
      output.endObject();
    }

    @Override
    public PlayerRecordInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 201702600: {
            if (input.isAtField(FieldNames.cPIKKMDOKHA)) {
              if (!input.trySkipNullValue()) {
                cPIKKMDOKHA = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -332836433: {
            if (input.isAtField(FieldNames.mGDIMDLPOGA)) {
              if (!input.trySkipNullValue()) {
                mGDIMDLPOGA = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 564682705: {
            if (input.isAtField(FieldNames.dKPLJPHGDMB)) {
              if (!input.trySkipNullValue()) {
                dKPLJPHGDMB = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1738823617: {
            if (input.isAtField(FieldNames.iNMEAGINKPN)) {
              if (!input.trySkipNullValue()) {
                iNMEAGINKPN = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 892464829: {
            if (input.isAtField(FieldNames.bIOJHIBFELK)) {
              if (!input.trySkipNullValue()) {
                bIOJHIBFELK = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 757747171: {
            if (input.isAtField(FieldNames.mFMOAJONBBF)) {
              if (!input.trySkipNullValue()) {
                mFMOAJONBBF = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1059627672: {
            if (input.isAtField(FieldNames.hNICFKBEKJO)) {
              if (!input.trySkipNullValue()) {
                hNICFKBEKJO = input.readUInt32();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 472412899: {
            if (input.isAtField(FieldNames.oOIOMMKOIAE)) {
              if (!input.trySkipNullValue()) {
                oOIOMMKOIAE = input.readUInt32();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 310642796:
          case 1060168111: {
            if (input.isAtField(FieldNames.collectionInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(collectionInfo);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public PlayerRecordInfo clone() {
      return new PlayerRecordInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static PlayerRecordInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new PlayerRecordInfo(), data).checkInitialized();
    }

    public static PlayerRecordInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerRecordInfo(), input).checkInitialized();
    }

    public static PlayerRecordInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerRecordInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating PlayerRecordInfo messages
     */
    public static MessageFactory<PlayerRecordInfo> getFactory() {
      return PlayerRecordInfoFactory.INSTANCE;
    }

    private enum PlayerRecordInfoFactory implements MessageFactory<PlayerRecordInfo> {
      INSTANCE;

      @Override
      public PlayerRecordInfo create() {
        return PlayerRecordInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName cPIKKMDOKHA = FieldName.forField("CPIKKMDOKHA");

      static final FieldName mGDIMDLPOGA = FieldName.forField("MGDIMDLPOGA");

      static final FieldName dKPLJPHGDMB = FieldName.forField("DKPLJPHGDMB");

      static final FieldName iNMEAGINKPN = FieldName.forField("INMEAGINKPN");

      static final FieldName bIOJHIBFELK = FieldName.forField("BIOJHIBFELK");

      static final FieldName mFMOAJONBBF = FieldName.forField("MFMOAJONBBF");

      static final FieldName hNICFKBEKJO = FieldName.forField("HNICFKBEKJO");

      static final FieldName oOIOMMKOIAE = FieldName.forField("OOIOMMKOIAE");

      static final FieldName collectionInfo = FieldName.forField("collectionInfo", "collection_info");
    }
  }
}
