// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChessRogueStartScRspOuterClass {
  /**
   * Protobuf type {@code ChessRogueStartScRsp}
   */
  public static final class ChessRogueStartScRsp extends ProtoMessage<ChessRogueStartScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 2;</code>
     */
    private int retcode;

    /**
     * <code>optional .ChessRogueCurrentInfo current_info = 1;</code>
     */
    private final ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo currentInfo = ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo.newInstance();

    /**
     * <code>optional .LineupInfo lineup = 8;</code>
     */
    private final LineupInfoOuterClass.LineupInfo lineup = LineupInfoOuterClass.LineupInfo.newInstance();

    /**
     * <code>optional .ChessRogueCellInfo cell_info = 13;</code>
     */
    private final ChessRogueCellInfoOuterClass.ChessRogueCellInfo cellInfo = ChessRogueCellInfoOuterClass.ChessRogueCellInfo.newInstance();

    /**
     * <pre>
     * PEEHMMLEDMP build_query = 3;
     * </pre>
     *
     * <code>optional .ChessRogueInfo chess_rogue_info = 14;</code>
     */
    private final ChessRogueInfoOuterClass.ChessRogueInfo chessRogueInfo = ChessRogueInfoOuterClass.ChessRogueInfo.newInstance();

    /**
     * <code>optional .SceneInfo scene = 15;</code>
     */
    private final SceneInfoOuterClass.SceneInfo scene = SceneInfoOuterClass.SceneInfo.newInstance();

    private ChessRogueStartScRsp() {
    }

    /**
     * @return a new empty instance of {@code ChessRogueStartScRsp}
     */
    public static ChessRogueStartScRsp newInstance() {
      return new ChessRogueStartScRsp();
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return this
     */
    public ChessRogueStartScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 2;</code>
     * @param value the retcode to set
     * @return this
     */
    public ChessRogueStartScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo current_info = 1;</code>
     * @return whether the currentInfo field is set
     */
    public boolean hasCurrentInfo() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo current_info = 1;</code>
     * @return this
     */
    public ChessRogueStartScRsp clearCurrentInfo() {
      bitField0_ &= ~0x00000002;
      currentInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo current_info = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCurrentInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo getCurrentInfo() {
      return currentInfo;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo current_info = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo getMutableCurrentInfo() {
      bitField0_ |= 0x00000002;
      return currentInfo;
    }

    /**
     * <code>optional .ChessRogueCurrentInfo current_info = 1;</code>
     * @param value the currentInfo to set
     * @return this
     */
    public ChessRogueStartScRsp setCurrentInfo(
        final ChessRogueCurrentInfoOuterClass.ChessRogueCurrentInfo value) {
      bitField0_ |= 0x00000002;
      currentInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .LineupInfo lineup = 8;</code>
     * @return whether the lineup field is set
     */
    public boolean hasLineup() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .LineupInfo lineup = 8;</code>
     * @return this
     */
    public ChessRogueStartScRsp clearLineup() {
      bitField0_ &= ~0x00000004;
      lineup.clear();
      return this;
    }

    /**
     * <code>optional .LineupInfo lineup = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLineup()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public LineupInfoOuterClass.LineupInfo getLineup() {
      return lineup;
    }

    /**
     * <code>optional .LineupInfo lineup = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public LineupInfoOuterClass.LineupInfo getMutableLineup() {
      bitField0_ |= 0x00000004;
      return lineup;
    }

    /**
     * <code>optional .LineupInfo lineup = 8;</code>
     * @param value the lineup to set
     * @return this
     */
    public ChessRogueStartScRsp setLineup(final LineupInfoOuterClass.LineupInfo value) {
      bitField0_ |= 0x00000004;
      lineup.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChessRogueCellInfo cell_info = 13;</code>
     * @return whether the cellInfo field is set
     */
    public boolean hasCellInfo() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .ChessRogueCellInfo cell_info = 13;</code>
     * @return this
     */
    public ChessRogueStartScRsp clearCellInfo() {
      bitField0_ &= ~0x00000008;
      cellInfo.clear();
      return this;
    }

    /**
     * <code>optional .ChessRogueCellInfo cell_info = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCellInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueCellInfoOuterClass.ChessRogueCellInfo getCellInfo() {
      return cellInfo;
    }

    /**
     * <code>optional .ChessRogueCellInfo cell_info = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueCellInfoOuterClass.ChessRogueCellInfo getMutableCellInfo() {
      bitField0_ |= 0x00000008;
      return cellInfo;
    }

    /**
     * <code>optional .ChessRogueCellInfo cell_info = 13;</code>
     * @param value the cellInfo to set
     * @return this
     */
    public ChessRogueStartScRsp setCellInfo(
        final ChessRogueCellInfoOuterClass.ChessRogueCellInfo value) {
      bitField0_ |= 0x00000008;
      cellInfo.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     * PEEHMMLEDMP build_query = 3;
     * </pre>
     *
     * <code>optional .ChessRogueInfo chess_rogue_info = 14;</code>
     * @return whether the chessRogueInfo field is set
     */
    public boolean hasChessRogueInfo() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <pre>
     * PEEHMMLEDMP build_query = 3;
     * </pre>
     *
     * <code>optional .ChessRogueInfo chess_rogue_info = 14;</code>
     * @return this
     */
    public ChessRogueStartScRsp clearChessRogueInfo() {
      bitField0_ &= ~0x00000010;
      chessRogueInfo.clear();
      return this;
    }

    /**
     * <pre>
     * PEEHMMLEDMP build_query = 3;
     * </pre>
     *
     * <code>optional .ChessRogueInfo chess_rogue_info = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableChessRogueInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChessRogueInfoOuterClass.ChessRogueInfo getChessRogueInfo() {
      return chessRogueInfo;
    }

    /**
     * <pre>
     * PEEHMMLEDMP build_query = 3;
     * </pre>
     *
     * <code>optional .ChessRogueInfo chess_rogue_info = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChessRogueInfoOuterClass.ChessRogueInfo getMutableChessRogueInfo() {
      bitField0_ |= 0x00000010;
      return chessRogueInfo;
    }

    /**
     * <pre>
     * PEEHMMLEDMP build_query = 3;
     * </pre>
     *
     * <code>optional .ChessRogueInfo chess_rogue_info = 14;</code>
     * @param value the chessRogueInfo to set
     * @return this
     */
    public ChessRogueStartScRsp setChessRogueInfo(
        final ChessRogueInfoOuterClass.ChessRogueInfo value) {
      bitField0_ |= 0x00000010;
      chessRogueInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .SceneInfo scene = 15;</code>
     * @return whether the scene field is set
     */
    public boolean hasScene() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional .SceneInfo scene = 15;</code>
     * @return this
     */
    public ChessRogueStartScRsp clearScene() {
      bitField0_ &= ~0x00000020;
      scene.clear();
      return this;
    }

    /**
     * <code>optional .SceneInfo scene = 15;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableScene()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public SceneInfoOuterClass.SceneInfo getScene() {
      return scene;
    }

    /**
     * <code>optional .SceneInfo scene = 15;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public SceneInfoOuterClass.SceneInfo getMutableScene() {
      bitField0_ |= 0x00000020;
      return scene;
    }

    /**
     * <code>optional .SceneInfo scene = 15;</code>
     * @param value the scene to set
     * @return this
     */
    public ChessRogueStartScRsp setScene(final SceneInfoOuterClass.SceneInfo value) {
      bitField0_ |= 0x00000020;
      scene.copyFrom(value);
      return this;
    }

    @Override
    public ChessRogueStartScRsp copyFrom(final ChessRogueStartScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        currentInfo.copyFrom(other.currentInfo);
        lineup.copyFrom(other.lineup);
        cellInfo.copyFrom(other.cellInfo);
        chessRogueInfo.copyFrom(other.chessRogueInfo);
        scene.copyFrom(other.scene);
      }
      return this;
    }

    @Override
    public ChessRogueStartScRsp mergeFrom(final ChessRogueStartScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasCurrentInfo()) {
        getMutableCurrentInfo().mergeFrom(other.currentInfo);
      }
      if (other.hasLineup()) {
        getMutableLineup().mergeFrom(other.lineup);
      }
      if (other.hasCellInfo()) {
        getMutableCellInfo().mergeFrom(other.cellInfo);
      }
      if (other.hasChessRogueInfo()) {
        getMutableChessRogueInfo().mergeFrom(other.chessRogueInfo);
      }
      if (other.hasScene()) {
        getMutableScene().mergeFrom(other.scene);
      }
      return this;
    }

    @Override
    public ChessRogueStartScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      currentInfo.clear();
      lineup.clear();
      cellInfo.clear();
      chessRogueInfo.clear();
      scene.clear();
      return this;
    }

    @Override
    public ChessRogueStartScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      currentInfo.clearQuick();
      lineup.clearQuick();
      cellInfo.clearQuick();
      chessRogueInfo.clearQuick();
      scene.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChessRogueStartScRsp)) {
        return false;
      }
      ChessRogueStartScRsp other = (ChessRogueStartScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasCurrentInfo() || currentInfo.equals(other.currentInfo))
        && (!hasLineup() || lineup.equals(other.lineup))
        && (!hasCellInfo() || cellInfo.equals(other.cellInfo))
        && (!hasChessRogueInfo() || chessRogueInfo.equals(other.chessRogueInfo))
        && (!hasScene() || scene.equals(other.scene));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(currentInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 66);
        output.writeMessageNoTag(lineup);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 106);
        output.writeMessageNoTag(cellInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 114);
        output.writeMessageNoTag(chessRogueInfo);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 122);
        output.writeMessageNoTag(scene);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(currentInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(lineup);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(cellInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(chessRogueInfo);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(scene);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChessRogueStartScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // currentInfo
            input.readMessage(currentInfo);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // lineup
            input.readMessage(lineup);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // cellInfo
            input.readMessage(cellInfo);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // chessRogueInfo
            input.readMessage(chessRogueInfo);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 122) {
              break;
            }
          }
          case 122: {
            // scene
            input.readMessage(scene);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.currentInfo, currentInfo);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.lineup, lineup);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeMessage(FieldNames.cellInfo, cellInfo);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeMessage(FieldNames.chessRogueInfo, chessRogueInfo);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeMessage(FieldNames.scene, scene);
      }
      output.endObject();
    }

    @Override
    public ChessRogueStartScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 600912327:
          case 1468588980: {
            if (input.isAtField(FieldNames.currentInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(currentInfo);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1102671473: {
            if (input.isAtField(FieldNames.lineup)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(lineup);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -917905104:
          case 1629888875: {
            if (input.isAtField(FieldNames.cellInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(cellInfo);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2057768312:
          case 1888241298: {
            if (input.isAtField(FieldNames.chessRogueInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(chessRogueInfo);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 109254796: {
            if (input.isAtField(FieldNames.scene)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(scene);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChessRogueStartScRsp clone() {
      return new ChessRogueStartScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChessRogueStartScRsp parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChessRogueStartScRsp(), data).checkInitialized();
    }

    public static ChessRogueStartScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueStartScRsp(), input).checkInitialized();
    }

    public static ChessRogueStartScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChessRogueStartScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChessRogueStartScRsp messages
     */
    public static MessageFactory<ChessRogueStartScRsp> getFactory() {
      return ChessRogueStartScRspFactory.INSTANCE;
    }

    private enum ChessRogueStartScRspFactory implements MessageFactory<ChessRogueStartScRsp> {
      INSTANCE;

      @Override
      public ChessRogueStartScRsp create() {
        return ChessRogueStartScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName currentInfo = FieldName.forField("currentInfo", "current_info");

      static final FieldName lineup = FieldName.forField("lineup");

      static final FieldName cellInfo = FieldName.forField("cellInfo", "cell_info");

      static final FieldName chessRogueInfo = FieldName.forField("chessRogueInfo", "chess_rogue_info");

      static final FieldName scene = FieldName.forField("scene");
    }
  }
}
