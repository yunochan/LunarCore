// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class ChallengeBossSingleNodeInfoOuterClass {
  /**
   * Protobuf type {@code ChallengeBossSingleNodeInfo}
   */
  public static final class ChallengeBossSingleNodeInfo extends ProtoMessage<ChallengeBossSingleNodeInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 KLJPBAAGNFN = 11;</code>
     */
    private int kLJPBAAGNFN;

    /**
     * <code>optional uint32 DAIMOOEMHJF = 14;</code>
     */
    private int dAIMOOEMHJF;

    /**
     * <code>optional bool BMIKMFLHMJD = 5;</code>
     */
    private boolean bMIKMFLHMJD;

    /**
     * <code>optional bool NAGJMPMHMMC = 7;</code>
     */
    private boolean nAGJMPMHMMC;

    private ChallengeBossSingleNodeInfo() {
    }

    /**
     * @return a new empty instance of {@code ChallengeBossSingleNodeInfo}
     */
    public static ChallengeBossSingleNodeInfo newInstance() {
      return new ChallengeBossSingleNodeInfo();
    }

    /**
     * <code>optional uint32 KLJPBAAGNFN = 11;</code>
     * @return whether the kLJPBAAGNFN field is set
     */
    public boolean hasKLJPBAAGNFN() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 KLJPBAAGNFN = 11;</code>
     * @return this
     */
    public ChallengeBossSingleNodeInfo clearKLJPBAAGNFN() {
      bitField0_ &= ~0x00000001;
      kLJPBAAGNFN = 0;
      return this;
    }

    /**
     * <code>optional uint32 KLJPBAAGNFN = 11;</code>
     * @return the kLJPBAAGNFN
     */
    public int getKLJPBAAGNFN() {
      return kLJPBAAGNFN;
    }

    /**
     * <code>optional uint32 KLJPBAAGNFN = 11;</code>
     * @param value the kLJPBAAGNFN to set
     * @return this
     */
    public ChallengeBossSingleNodeInfo setKLJPBAAGNFN(final int value) {
      bitField0_ |= 0x00000001;
      kLJPBAAGNFN = value;
      return this;
    }

    /**
     * <code>optional uint32 DAIMOOEMHJF = 14;</code>
     * @return whether the dAIMOOEMHJF field is set
     */
    public boolean hasDAIMOOEMHJF() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 DAIMOOEMHJF = 14;</code>
     * @return this
     */
    public ChallengeBossSingleNodeInfo clearDAIMOOEMHJF() {
      bitField0_ &= ~0x00000002;
      dAIMOOEMHJF = 0;
      return this;
    }

    /**
     * <code>optional uint32 DAIMOOEMHJF = 14;</code>
     * @return the dAIMOOEMHJF
     */
    public int getDAIMOOEMHJF() {
      return dAIMOOEMHJF;
    }

    /**
     * <code>optional uint32 DAIMOOEMHJF = 14;</code>
     * @param value the dAIMOOEMHJF to set
     * @return this
     */
    public ChallengeBossSingleNodeInfo setDAIMOOEMHJF(final int value) {
      bitField0_ |= 0x00000002;
      dAIMOOEMHJF = value;
      return this;
    }

    /**
     * <code>optional bool BMIKMFLHMJD = 5;</code>
     * @return whether the bMIKMFLHMJD field is set
     */
    public boolean hasBMIKMFLHMJD() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool BMIKMFLHMJD = 5;</code>
     * @return this
     */
    public ChallengeBossSingleNodeInfo clearBMIKMFLHMJD() {
      bitField0_ &= ~0x00000004;
      bMIKMFLHMJD = false;
      return this;
    }

    /**
     * <code>optional bool BMIKMFLHMJD = 5;</code>
     * @return the bMIKMFLHMJD
     */
    public boolean getBMIKMFLHMJD() {
      return bMIKMFLHMJD;
    }

    /**
     * <code>optional bool BMIKMFLHMJD = 5;</code>
     * @param value the bMIKMFLHMJD to set
     * @return this
     */
    public ChallengeBossSingleNodeInfo setBMIKMFLHMJD(final boolean value) {
      bitField0_ |= 0x00000004;
      bMIKMFLHMJD = value;
      return this;
    }

    /**
     * <code>optional bool NAGJMPMHMMC = 7;</code>
     * @return whether the nAGJMPMHMMC field is set
     */
    public boolean hasNAGJMPMHMMC() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool NAGJMPMHMMC = 7;</code>
     * @return this
     */
    public ChallengeBossSingleNodeInfo clearNAGJMPMHMMC() {
      bitField0_ &= ~0x00000008;
      nAGJMPMHMMC = false;
      return this;
    }

    /**
     * <code>optional bool NAGJMPMHMMC = 7;</code>
     * @return the nAGJMPMHMMC
     */
    public boolean getNAGJMPMHMMC() {
      return nAGJMPMHMMC;
    }

    /**
     * <code>optional bool NAGJMPMHMMC = 7;</code>
     * @param value the nAGJMPMHMMC to set
     * @return this
     */
    public ChallengeBossSingleNodeInfo setNAGJMPMHMMC(final boolean value) {
      bitField0_ |= 0x00000008;
      nAGJMPMHMMC = value;
      return this;
    }

    @Override
    public ChallengeBossSingleNodeInfo copyFrom(final ChallengeBossSingleNodeInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kLJPBAAGNFN = other.kLJPBAAGNFN;
        dAIMOOEMHJF = other.dAIMOOEMHJF;
        bMIKMFLHMJD = other.bMIKMFLHMJD;
        nAGJMPMHMMC = other.nAGJMPMHMMC;
      }
      return this;
    }

    @Override
    public ChallengeBossSingleNodeInfo mergeFrom(final ChallengeBossSingleNodeInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKLJPBAAGNFN()) {
        setKLJPBAAGNFN(other.kLJPBAAGNFN);
      }
      if (other.hasDAIMOOEMHJF()) {
        setDAIMOOEMHJF(other.dAIMOOEMHJF);
      }
      if (other.hasBMIKMFLHMJD()) {
        setBMIKMFLHMJD(other.bMIKMFLHMJD);
      }
      if (other.hasNAGJMPMHMMC()) {
        setNAGJMPMHMMC(other.nAGJMPMHMMC);
      }
      return this;
    }

    @Override
    public ChallengeBossSingleNodeInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kLJPBAAGNFN = 0;
      dAIMOOEMHJF = 0;
      bMIKMFLHMJD = false;
      nAGJMPMHMMC = false;
      return this;
    }

    @Override
    public ChallengeBossSingleNodeInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeBossSingleNodeInfo)) {
        return false;
      }
      ChallengeBossSingleNodeInfo other = (ChallengeBossSingleNodeInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasKLJPBAAGNFN() || kLJPBAAGNFN == other.kLJPBAAGNFN)
        && (!hasDAIMOOEMHJF() || dAIMOOEMHJF == other.dAIMOOEMHJF)
        && (!hasBMIKMFLHMJD() || bMIKMFLHMJD == other.bMIKMFLHMJD)
        && (!hasNAGJMPMHMMC() || nAGJMPMHMMC == other.nAGJMPMHMMC);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(kLJPBAAGNFN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(dAIMOOEMHJF);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 40);
        output.writeBoolNoTag(bMIKMFLHMJD);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 56);
        output.writeBoolNoTag(nAGJMPMHMMC);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(kLJPBAAGNFN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(dAIMOOEMHJF);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeBossSingleNodeInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 88: {
            // kLJPBAAGNFN
            kLJPBAAGNFN = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // dAIMOOEMHJF
            dAIMOOEMHJF = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 40) {
              break;
            }
          }
          case 40: {
            // bMIKMFLHMJD
            bMIKMFLHMJD = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // nAGJMPMHMMC
            nAGJMPMHMMC = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.kLJPBAAGNFN, kLJPBAAGNFN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.dAIMOOEMHJF, dAIMOOEMHJF);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.bMIKMFLHMJD, bMIKMFLHMJD);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.nAGJMPMHMMC, nAGJMPMHMMC);
      }
      output.endObject();
    }

    @Override
    public ChallengeBossSingleNodeInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1930444150: {
            if (input.isAtField(FieldNames.kLJPBAAGNFN)) {
              if (!input.trySkipNullValue()) {
                kLJPBAAGNFN = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -143725957: {
            if (input.isAtField(FieldNames.dAIMOOEMHJF)) {
              if (!input.trySkipNullValue()) {
                dAIMOOEMHJF = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -124987899: {
            if (input.isAtField(FieldNames.bMIKMFLHMJD)) {
              if (!input.trySkipNullValue()) {
                bMIKMFLHMJD = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 8940751: {
            if (input.isAtField(FieldNames.nAGJMPMHMMC)) {
              if (!input.trySkipNullValue()) {
                nAGJMPMHMMC = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeBossSingleNodeInfo clone() {
      return new ChallengeBossSingleNodeInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeBossSingleNodeInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeBossSingleNodeInfo(), data).checkInitialized();
    }

    public static ChallengeBossSingleNodeInfo parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossSingleNodeInfo(), input).checkInitialized();
    }

    public static ChallengeBossSingleNodeInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossSingleNodeInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeBossSingleNodeInfo messages
     */
    public static MessageFactory<ChallengeBossSingleNodeInfo> getFactory() {
      return ChallengeBossSingleNodeInfoFactory.INSTANCE;
    }

    private enum ChallengeBossSingleNodeInfoFactory implements MessageFactory<ChallengeBossSingleNodeInfo> {
      INSTANCE;

      @Override
      public ChallengeBossSingleNodeInfo create() {
        return ChallengeBossSingleNodeInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kLJPBAAGNFN = FieldName.forField("KLJPBAAGNFN");

      static final FieldName dAIMOOEMHJF = FieldName.forField("DAIMOOEMHJF");

      static final FieldName bMIKMFLHMJD = FieldName.forField("BMIKMFLHMJD");

      static final FieldName nAGJMPMHMMC = FieldName.forField("NAGJMPMHMMC");
    }
  }
}
