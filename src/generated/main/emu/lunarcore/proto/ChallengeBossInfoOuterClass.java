// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class ChallengeBossInfoOuterClass {
  /**
   * Protobuf type {@code ChallengeBossInfo}
   */
  public static final class ChallengeBossInfo extends ProtoMessage<ChallengeBossInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     *  map<uint32, JBDNIEFPHLE> MPHILJEPBDD = 3;
     * </pre>
     *
     * <code>optional bool ACGHCDLBCGD = 14;</code>
     */
    private boolean aCGHCDLBCGD;

    /**
     * <code>optional .ChallengeBossSingleNodeInfo first_node = 1;</code>
     */
    private final ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo firstNode = ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo.newInstance();

    /**
     * <code>optional .ChallengeBossSingleNodeInfo second_node = 5;</code>
     */
    private final ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo secondNode = ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo.newInstance();

    /**
     * <pre>
     *  map<uint32, BMLNHLAGLIP> GJPKHDHDCDN = 12;
     * </pre>
     *
     * <code>repeated uint32 lineup2 = 2;</code>
     */
    private final RepeatedInt lineup2 = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 lineup1 = 11;</code>
     */
    private final RepeatedInt lineup1 = RepeatedInt.newEmptyInstance();

    private ChallengeBossInfo() {
    }

    /**
     * @return a new empty instance of {@code ChallengeBossInfo}
     */
    public static ChallengeBossInfo newInstance() {
      return new ChallengeBossInfo();
    }

    /**
     * <pre>
     *  map<uint32, JBDNIEFPHLE> MPHILJEPBDD = 3;
     * </pre>
     *
     * <code>optional bool ACGHCDLBCGD = 14;</code>
     * @return whether the aCGHCDLBCGD field is set
     */
    public boolean hasACGHCDLBCGD() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     *  map<uint32, JBDNIEFPHLE> MPHILJEPBDD = 3;
     * </pre>
     *
     * <code>optional bool ACGHCDLBCGD = 14;</code>
     * @return this
     */
    public ChallengeBossInfo clearACGHCDLBCGD() {
      bitField0_ &= ~0x00000001;
      aCGHCDLBCGD = false;
      return this;
    }

    /**
     * <pre>
     *  map<uint32, JBDNIEFPHLE> MPHILJEPBDD = 3;
     * </pre>
     *
     * <code>optional bool ACGHCDLBCGD = 14;</code>
     * @return the aCGHCDLBCGD
     */
    public boolean getACGHCDLBCGD() {
      return aCGHCDLBCGD;
    }

    /**
     * <pre>
     *  map<uint32, JBDNIEFPHLE> MPHILJEPBDD = 3;
     * </pre>
     *
     * <code>optional bool ACGHCDLBCGD = 14;</code>
     * @param value the aCGHCDLBCGD to set
     * @return this
     */
    public ChallengeBossInfo setACGHCDLBCGD(final boolean value) {
      bitField0_ |= 0x00000001;
      aCGHCDLBCGD = value;
      return this;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo first_node = 1;</code>
     * @return whether the firstNode field is set
     */
    public boolean hasFirstNode() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo first_node = 1;</code>
     * @return this
     */
    public ChallengeBossInfo clearFirstNode() {
      bitField0_ &= ~0x00000002;
      firstNode.clear();
      return this;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo first_node = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFirstNode()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo getFirstNode() {
      return firstNode;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo first_node = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo getMutableFirstNode() {
      bitField0_ |= 0x00000002;
      return firstNode;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo first_node = 1;</code>
     * @param value the firstNode to set
     * @return this
     */
    public ChallengeBossInfo setFirstNode(
        final ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo value) {
      bitField0_ |= 0x00000002;
      firstNode.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo second_node = 5;</code>
     * @return whether the secondNode field is set
     */
    public boolean hasSecondNode() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo second_node = 5;</code>
     * @return this
     */
    public ChallengeBossInfo clearSecondNode() {
      bitField0_ &= ~0x00000004;
      secondNode.clear();
      return this;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo second_node = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSecondNode()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo getSecondNode() {
      return secondNode;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo second_node = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo getMutableSecondNode(
        ) {
      bitField0_ |= 0x00000004;
      return secondNode;
    }

    /**
     * <code>optional .ChallengeBossSingleNodeInfo second_node = 5;</code>
     * @param value the secondNode to set
     * @return this
     */
    public ChallengeBossInfo setSecondNode(
        final ChallengeBossSingleNodeInfoOuterClass.ChallengeBossSingleNodeInfo value) {
      bitField0_ |= 0x00000004;
      secondNode.copyFrom(value);
      return this;
    }

    /**
     * <pre>
     *  map<uint32, BMLNHLAGLIP> GJPKHDHDCDN = 12;
     * </pre>
     *
     * <code>repeated uint32 lineup2 = 2;</code>
     * @return whether the lineup2 field is set
     */
    public boolean hasLineup2() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <pre>
     *  map<uint32, BMLNHLAGLIP> GJPKHDHDCDN = 12;
     * </pre>
     *
     * <code>repeated uint32 lineup2 = 2;</code>
     * @return this
     */
    public ChallengeBossInfo clearLineup2() {
      bitField0_ &= ~0x00000008;
      lineup2.clear();
      return this;
    }

    /**
     * <pre>
     *  map<uint32, BMLNHLAGLIP> GJPKHDHDCDN = 12;
     * </pre>
     *
     * <code>repeated uint32 lineup2 = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLineup2()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getLineup2() {
      return lineup2;
    }

    /**
     * <pre>
     *  map<uint32, BMLNHLAGLIP> GJPKHDHDCDN = 12;
     * </pre>
     *
     * <code>repeated uint32 lineup2 = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableLineup2() {
      bitField0_ |= 0x00000008;
      return lineup2;
    }

    /**
     * <pre>
     *  map<uint32, BMLNHLAGLIP> GJPKHDHDCDN = 12;
     * </pre>
     *
     * <code>repeated uint32 lineup2 = 2;</code>
     * @param value the lineup2 to add
     * @return this
     */
    public ChallengeBossInfo addLineup2(final int value) {
      bitField0_ |= 0x00000008;
      lineup2.add(value);
      return this;
    }

    /**
     * <pre>
     *  map<uint32, BMLNHLAGLIP> GJPKHDHDCDN = 12;
     * </pre>
     *
     * <code>repeated uint32 lineup2 = 2;</code>
     * @param values the lineup2 to add
     * @return this
     */
    public ChallengeBossInfo addAllLineup2(final int... values) {
      bitField0_ |= 0x00000008;
      lineup2.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 lineup1 = 11;</code>
     * @return whether the lineup1 field is set
     */
    public boolean hasLineup1() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 lineup1 = 11;</code>
     * @return this
     */
    public ChallengeBossInfo clearLineup1() {
      bitField0_ &= ~0x00000010;
      lineup1.clear();
      return this;
    }

    /**
     * <code>repeated uint32 lineup1 = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLineup1()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getLineup1() {
      return lineup1;
    }

    /**
     * <code>repeated uint32 lineup1 = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableLineup1() {
      bitField0_ |= 0x00000010;
      return lineup1;
    }

    /**
     * <code>repeated uint32 lineup1 = 11;</code>
     * @param value the lineup1 to add
     * @return this
     */
    public ChallengeBossInfo addLineup1(final int value) {
      bitField0_ |= 0x00000010;
      lineup1.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 lineup1 = 11;</code>
     * @param values the lineup1 to add
     * @return this
     */
    public ChallengeBossInfo addAllLineup1(final int... values) {
      bitField0_ |= 0x00000010;
      lineup1.addAll(values);
      return this;
    }

    @Override
    public ChallengeBossInfo copyFrom(final ChallengeBossInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        aCGHCDLBCGD = other.aCGHCDLBCGD;
        firstNode.copyFrom(other.firstNode);
        secondNode.copyFrom(other.secondNode);
        lineup2.copyFrom(other.lineup2);
        lineup1.copyFrom(other.lineup1);
      }
      return this;
    }

    @Override
    public ChallengeBossInfo mergeFrom(final ChallengeBossInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasACGHCDLBCGD()) {
        setACGHCDLBCGD(other.aCGHCDLBCGD);
      }
      if (other.hasFirstNode()) {
        getMutableFirstNode().mergeFrom(other.firstNode);
      }
      if (other.hasSecondNode()) {
        getMutableSecondNode().mergeFrom(other.secondNode);
      }
      if (other.hasLineup2()) {
        getMutableLineup2().addAll(other.lineup2);
      }
      if (other.hasLineup1()) {
        getMutableLineup1().addAll(other.lineup1);
      }
      return this;
    }

    @Override
    public ChallengeBossInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aCGHCDLBCGD = false;
      firstNode.clear();
      secondNode.clear();
      lineup2.clear();
      lineup1.clear();
      return this;
    }

    @Override
    public ChallengeBossInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      firstNode.clearQuick();
      secondNode.clearQuick();
      lineup2.clear();
      lineup1.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof ChallengeBossInfo)) {
        return false;
      }
      ChallengeBossInfo other = (ChallengeBossInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasACGHCDLBCGD() || aCGHCDLBCGD == other.aCGHCDLBCGD)
        && (!hasFirstNode() || firstNode.equals(other.firstNode))
        && (!hasSecondNode() || secondNode.equals(other.secondNode))
        && (!hasLineup2() || lineup2.equals(other.lineup2))
        && (!hasLineup1() || lineup1.equals(other.lineup1));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 112);
        output.writeBoolNoTag(aCGHCDLBCGD);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 10);
        output.writeMessageNoTag(firstNode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 42);
        output.writeMessageNoTag(secondNode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < lineup2.length(); i++) {
          output.writeRawByte((byte) 16);
          output.writeUInt32NoTag(lineup2.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < lineup1.length(); i++) {
          output.writeRawByte((byte) 88);
          output.writeUInt32NoTag(lineup1.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(firstNode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(secondNode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * lineup2.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(lineup2);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * lineup1.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(lineup1);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public ChallengeBossInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 112: {
            // aCGHCDLBCGD
            aCGHCDLBCGD = input.readBool();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // firstNode
            input.readMessage(firstNode);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // secondNode
            input.readMessage(secondNode);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // lineup2 [packed=true]
            input.readPackedUInt32(lineup2, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // lineup1 [packed=true]
            input.readPackedUInt32(lineup1, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 16: {
            // lineup2 [packed=false]
            tag = input.readRepeatedUInt32(lineup2, tag);
            bitField0_ |= 0x00000008;
            break;
          }
          case 88: {
            // lineup1 [packed=false]
            tag = input.readRepeatedUInt32(lineup1, tag);
            bitField0_ |= 0x00000010;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeBool(FieldNames.aCGHCDLBCGD, aCGHCDLBCGD);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeMessage(FieldNames.firstNode, firstNode);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeMessage(FieldNames.secondNode, secondNode);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.lineup2, lineup2);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.lineup1, lineup1);
      }
      output.endObject();
    }

    @Override
    public ChallengeBossInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1681027462: {
            if (input.isAtField(FieldNames.aCGHCDLBCGD)) {
              if (!input.trySkipNullValue()) {
                aCGHCDLBCGD = input.readBool();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 132848850:
          case -160972239: {
            if (input.isAtField(FieldNames.firstNode)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(firstNode);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 423693462:
          case 265276141: {
            if (input.isAtField(FieldNames.secondNode)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(secondNode);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 176922755: {
            if (input.isAtField(FieldNames.lineup2)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(lineup2);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 176922754: {
            if (input.isAtField(FieldNames.lineup1)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(lineup1);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public ChallengeBossInfo clone() {
      return new ChallengeBossInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static ChallengeBossInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new ChallengeBossInfo(), data).checkInitialized();
    }

    public static ChallengeBossInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossInfo(), input).checkInitialized();
    }

    public static ChallengeBossInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new ChallengeBossInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating ChallengeBossInfo messages
     */
    public static MessageFactory<ChallengeBossInfo> getFactory() {
      return ChallengeBossInfoFactory.INSTANCE;
    }

    private enum ChallengeBossInfoFactory implements MessageFactory<ChallengeBossInfo> {
      INSTANCE;

      @Override
      public ChallengeBossInfo create() {
        return ChallengeBossInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName aCGHCDLBCGD = FieldName.forField("ACGHCDLBCGD");

      static final FieldName firstNode = FieldName.forField("firstNode", "first_node");

      static final FieldName secondNode = FieldName.forField("secondNode", "second_node");

      static final FieldName lineup2 = FieldName.forField("lineup2");

      static final FieldName lineup1 = FieldName.forField("lineup1");
    }
  }
}
